"use strict";
/// <reference types="cypress" />
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_tags_1 = require("common-tags");
var highlight_js_1 = require("highlight.js");
var pack = require('../package.json');
//
// implementation of the custom command "cy.api"
// https://github.com/bahmutov/cy-api
//
// shortcuts to a few Lodash methods
var _a = Cypress._, get = _a.get, filter = _a.filter, map = _a.map, uniq = _a.uniq;
var firstApiRequest;
var globalDisplayRequest = true;
Cypress.on('test:before:run', function () {
    // @ts-ignore
    var apiDisplayRequest = Cypress.config('apiDisplayRequest');
    globalDisplayRequest = apiDisplayRequest === undefined ? true : apiDisplayRequest;
    firstApiRequest = true;
    // @ts-ignore
    var doc = cy.state('document');
    doc.body.innerHTML = '';
});
function initApiOptions() {
    if (globalDisplayRequest === false) {
        return { displayRequest: false };
    }
    else {
        return { displayRequest: true };
    }
}
Cypress.Commands.add('api', function (options, name) {
    if (name === void 0) { name = 'api'; }
    var apiOptions = initApiOptions();
    var hasApiMessages = Cypress.env('API_MESSAGES') === false ? false : true;
    var normalizedTypes = [];
    var normalizedNamespaces = [];
    var _a = getContainer(), container = _a.container, win = _a.win, doc = _a.doc;
    var messagesEndpoint = get(Cypress.env(), 'cyApi.messages', '/__messages__');
    // first reset any messages on the server
    if (hasApiMessages) {
        cy.request({
            method: 'POST',
            url: messagesEndpoint,
            log: false,
            failOnStatusCode: false // maybe there is no endpoint with logs
        });
    }
    // should we log the message before a request
    // in case it fails?
    Cypress.log({
        name: name,
        message: options.url,
        consoleProps: function () {
            return {
                request: options
            };
        }
    });
    var topMargin = '0';
    if (firstApiRequest) {
        container.innerHTML = '';
    }
    if (apiOptions.displayRequest) {
        if (firstApiRequest) {
            // remove existing content from the application frame
            firstApiRequest = false;
            container.innerHTML = (0, common_tags_1.html)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/", "/styles/vs.min.css\">\n      <style>\n      .container { background-color: rgb(238, 238, 238); border-radius: 6px; padding: 30px 15px; text-align: center; }\n        .cy-api {\n          text-align: left;\n        }\n        .cy-api-request {\n          font-weight: 600;\n        }\n        .cy-api-logs-messages {\n          text-align: left;\n          max-height: 25em;\n          overflow-y: scroll;\n          background-color: lightyellow;\n          padding: 4px;\n          border-radius: 4px;\n        }\n        .cy-api-response {\n          text-align: left;\n          margin-top: 1em;\n        }\n        .hljs {\n          background: rgb(238, 238, 238);\n        }\n      </style>\n    "], ["\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/", "/styles/vs.min.css\">\n      <style>\n      .container { background-color: rgb(238, 238, 238); border-radius: 6px; padding: 30px 15px; text-align: center; }\n        .cy-api {\n          text-align: left;\n        }\n        .cy-api-request {\n          font-weight: 600;\n        }\n        .cy-api-logs-messages {\n          text-align: left;\n          max-height: 25em;\n          overflow-y: scroll;\n          background-color: lightyellow;\n          padding: 4px;\n          border-radius: 4px;\n        }\n        .cy-api-response {\n          text-align: left;\n          margin-top: 1em;\n        }\n        .hljs {\n          background: rgb(238, 238, 238);\n        }\n      </style>\n    "])), pack['dependencies']['highlight.js']);
        }
        else {
            container.innerHTML += '<br><hr>\n';
            topMargin = '1em';
        }
    }
    if (apiOptions.displayRequest) {
        container.innerHTML +=
            // should we use custom class and insert class style?
            '<div class="cy-api">\n' +
                "<h1 class=\"cy-api-request\" style=\"margin: ".concat(topMargin, " 0 1em\">Cy-api: ").concat(name, "</h1>\n") +
                '<div>\n' +
                '<b>Request:</b>\n' +
                '<pre class="hljs">' +
                formatRequest(options) +
                '\n</pre></div>';
    }
    cy.request(__assign(__assign({}, options), { log: false })).then(function (_a) {
        var duration = _a.duration, body = _a.body, status = _a.status, headers = _a.headers, requestHeaders = _a.requestHeaders, statusText = _a.statusText;
        return printResponse(container, hasApiMessages, messagesEndpoint, normalizedTypes, normalizedNamespaces, apiOptions.displayRequest).then(function (_a) {
            var messages = _a.messages;
            return cy.wrap({ messages: messages, duration: duration, body: body, status: status, headers: headers, requestHeaders: requestHeaders, statusText: statusText }, { log: false });
        });
    }).then(function (_a) {
        var messages = _a.messages, duration = _a.duration, body = _a.body, status = _a.status, headers = _a.headers, requestHeaders = _a.requestHeaders, statusText = _a.statusText;
        // render the response object
        // TODO render headers?
        if (apiOptions.displayRequest) {
            container.innerHTML +=
                '<div class="cy-api-response">\n' +
                    "<b>Response: ".concat(status, " ").concat(duration, "ms</b>\n") +
                    '<pre class="hljs">' +
                    formatResponse(body, headers) +
                    '\n</pre></div></div>';
        }
        // log the response
        Cypress.log({
            name: 'response',
            message: options.url,
            consoleProps: function () {
                return {
                    type: typeof body,
                    response: body
                };
            }
        });
        for (var _i = 0, normalizedTypes_1 = normalizedTypes; _i < normalizedTypes_1.length; _i++) {
            var type = normalizedTypes_1[_i];
            addOnClickFilter(type);
        }
        for (var _b = 0, normalizedNamespaces_1 = normalizedNamespaces; _b < normalizedNamespaces_1.length; _b++) {
            var namespace = normalizedNamespaces_1[_b];
            addOnClickFilter(namespace);
        }
        win.scrollTo(0, doc.body.scrollHeight);
        return {
            messages: messages,
            // original response information
            duration: duration,
            body: body,
            status: status,
            statusText: statusText,
            headers: headers,
            requestHeaders: requestHeaders
        };
    });
});
var printResponse = function (container, hasApiMessages, messagesEndpoint, normalizedTypes, normalizedNamespaces, displayRequest) {
    if (displayRequest === void 0) { displayRequest = true; }
    var messages = [];
    if (hasApiMessages) {
        return cy.request({
            url: messagesEndpoint,
            log: false,
            failOnStatusCode: false // maybe there is no endpoint with logs
        }).then(function (res) {
            messages = get(res, 'body.messages', []);
            if (messages.length) {
                var types = uniq(map(messages, 'type')).sort();
                // types will be like
                // ['console', 'debug', 'util.debuglog']
                var namespaces = types.map(function (type) {
                    return {
                        type: type,
                        namespaces: uniq(map(filter(messages, { type: type }), 'namespace')).sort()
                    };
                });
                // namespaces will be like
                // [
                //  {type: 'console', namespaces: ['log']},
                //  {type: 'util.debuglog', namespaces: ['HTTP']}
                // ]
                if (displayRequest) {
                    container.innerHTML +=
                        '<hr>\n' + '<div style="text-align: left">\n' + "<b>Server logs</b>";
                    if (types.length) {
                        for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
                            var type = types_1[_i];
                            var normalizedType = normalize(type);
                            normalizedTypes.push(normalizedType);
                            container.innerHTML += "\n<input type=\"checkbox\" id=\"check-".concat(normalizedType, "\" checked name=\"").concat(type, "\" value=\"").concat(normalizedType, "\"> ").concat(type);
                        }
                        container.innerHTML += '<br/>\n';
                    }
                    if (namespaces.length) {
                        container.innerHTML +=
                            '\n' +
                                namespaces
                                    .map(function (n) {
                                    if (!n.namespaces.length) {
                                        return '';
                                    }
                                    return n.namespaces
                                        .map(function (namespace) {
                                        var normalizedNamespace = normalize(n.type, namespace);
                                        normalizedNamespaces.push(normalizedNamespace);
                                        return "\n<input type=\"checkbox\" name=\"".concat(n.type, ".").concat(namespace, "\"\n                        id=\"check-").concat(normalizedNamespace, "\" checked\n                        value=\"").concat(normalizedNamespace, "\"> ").concat(n.type, ".").concat(namespace);
                                    })
                                        .join('');
                                })
                                    .join('') +
                                '<br/>\n';
                    }
                    container.innerHTML +=
                        '\n<pre class="cy-api-logs-messages">' +
                            messages
                                .map(function (m) { return "<div class=\"".concat(normalize(m.type), " ").concat(normalize(m.type, m.namespace), "\">").concat(m.type, " ").concat(m.namespace, ": ").concat(m.message, "</div>"); })
                                .join('') +
                            '\n</pre></div>';
                }
            }
        }).then(function () { return cy.wrap({ messages: messages }, { log: false }); });
    }
    else {
        return cy.wrap({ messages: messages }, { log: false });
    }
};
var normalize = function (type, namespace) {
    if (namespace === void 0) { namespace = null; }
    var normalized = type.replace('.', '-');
    if (namespace) {
        namespace = namespace.replace('.', '-');
        normalized += "-".concat(namespace);
    }
    return normalized;
};
var addOnClickFilter = function (filterId) {
    // @ts-ignore
    var doc = cy.state('document');
    doc.getElementById("check-".concat(filterId)).onclick = function () {
        var checkbox = doc.getElementById("check-".concat(filterId));
        var elements = doc.getElementsByClassName(checkbox.value);
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var log = elements_1[_i];
            log.style.display = checkbox.checked ? 'block' : 'none';
        }
    };
};
var getContainer = function () {
    // @ts-ignore
    var doc = cy.state('document');
    // @ts-ignore
    var win = cy.state('window');
    var container = doc.querySelector('.container');
    if (!container) {
        container = doc.createElement('div');
        container.className = 'container';
        doc.body.appendChild(container);
    }
    container.className = 'container';
    return { container: container, win: win, doc: doc };
};
var formatJSon = function (jsonObject) {
    return highlight_js_1.default.highlight(JSON.stringify(jsonObject, null, 4), { language: 'json' }).value;
};
var formatRequest = function (options) {
    var showCredentials = Cypress.env('API_SHOW_CREDENTIALS');
    var auth = options === null || options === void 0 ? void 0 : options.auth;
    var hasPassword = auth === null || auth === void 0 ? void 0 : auth.password;
    if (!showCredentials && hasPassword) {
        return formatJSon(__assign(__assign({}, options), { auth: __assign(__assign({}, options.auth), { password: '*****' }) }));
    }
    return formatJSon(options);
};
var formatResponse = function (body, headers) {
    var _a;
    if ((_a = headers === null || headers === void 0 ? void 0 : headers['content-type']) === null || _a === void 0 ? void 0 : _a.includes('application/json')) {
        return formatJSon(body);
    }
    else {
        return body;
    }
};
var templateObject_1;
